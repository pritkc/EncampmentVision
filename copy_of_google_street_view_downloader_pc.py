# -*- coding: utf-8 -*-
"""Copy of Google Street View Downloader PC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1odfXXpRQJjfVQZ1Q50BTKxCkDJXskrtX
"""

import google_streetview.api
import os
import time
import requests  # Import the requests library
from dotenv import load_dotenv  # Import dotenv to load environment variables

# Load environment variables from .env file
load_dotenv()

# Google Street View API key
API_KEY = os.getenv("API_KEY")  # Get API key from environment variable

# Define bounding box coordinates
# 40.7633793,-73.9673526
top_left = (40.7596202,-73.9700484)    # Example: User-defined top-left corner
bottom_right = (40.7633793,-73.9673526) # Example: User-defined bottom-right corner

# Define the number of points along the major axis
num_points_major = 100  # User sets this; the script calculates everything else(This means how many pictures you want to download within those lat&long coordinates)

# Output directory for downloaded images
output_dir = "content/drive/MyDrive/StreetViewImages/"
os.makedirs(output_dir, exist_ok=True)

# Function to determine the major axis and step size automatically
def calculate_grid_steps(top_left, bottom_right, num_points_major):
    lat1, lon1 = top_left
    lat2, lon2 = bottom_right

    lat_diff = abs(lat1 - lat2)
    lon_diff = abs(lon1 - lon2)

    if lat_diff > lon_diff:
        # Street runs north-south
        latitude_step = lat_diff / (num_points_major - 1)
        longitude_step = 0  # Keep longitude constant
        major_axis = "latitude"
    else:
        # Street runs east-west
        latitude_step = 0  # Keep latitude constant
        longitude_step = lon_diff / (num_points_major - 1)
        major_axis = "longitude"

    # Ensure steps respect the direction of travel (positive/negative values)
    latitude_step = -latitude_step if lat1 > lat2 else latitude_step
    longitude_step = -longitude_step if lon1 > lon2 else longitude_step

    return latitude_step, longitude_step, major_axis

# Auto-calculate grid step sizes
latitude_step, longitude_step, major_axis = calculate_grid_steps(top_left, bottom_right, num_points_major)

# Function to generate grid points based on the detected direction
def generate_grid(top_left, num_points_major, latitude_step, longitude_step, major_axis):
    lat1, lon1 = top_left
    grid_points = [(lat1 + i * latitude_step, lon1 + i * longitude_step) for i in range(num_points_major)]
    return grid_points

# Generate grid of points
grid_points = generate_grid(top_left, num_points_major, latitude_step, longitude_step, major_axis)
print(f"Generated {len(grid_points)} grid points along the {major_axis} axis.")

# Check if API key is available
if not API_KEY:
    raise ValueError("API key not found. Please set the API_KEY in the .env file.")

# Check if there are any grid points
if not grid_points:
    print("No grid points generated. Please adjust num_points_major.")
else:
    # Download Google Street View images for each point in the grid at angles 90 and 270
    for idx, (lat, lon) in enumerate(grid_points):
        headings = [90, 270]  # Capture street view images from two angles
        for heading in headings:
            # Define parameters for the Google Street View API request
            params = [{
                'size': '640x640',     # Maximum resolution allowed by API
                'location': f'{lat},{lon}',
                'heading': str(heading),  # Set heading to 90 and 270
                'pitch': '0',          # Adjust pitch as desired (0 = horizon)
                'key': API_KEY
            }]

            # Use Google Street View API to get image and metadata
            results = google_streetview.api.results(params)

            try:
                # Extract metadata
                metadata = results.metadata[0]  # Get metadata for the first result
                pano_id = metadata.get('pano_id', 'unknown')
                date = metadata.get('date', 'unknown')

                # Define a filename based on coordinates, heading, and capture date
                filename = f"streetview_{pano_id}_{date}_{lat}_{lon}_heading{heading}.jpg"
                filepath = os.path.join(output_dir, filename)

                # Download the image directly to the specified path
                if results.links:
                    response = requests.get(results.links[0])
                    with open(filepath, 'wb') as f:
                        f.write(response.content)
                    print(f"Downloaded image for location {lat}, {lon} at heading {heading} as {filename}")
                else:
                    print(f"No image available for location {lat}, {lon} at heading {heading}")

                time.sleep(1)  # Sleep to avoid hitting rate limits (adjust as needed)
            except Exception as e:
                print(f"Failed to download image for location {lat}, {lon} at heading {heading}: {e}")

    print("Download completed.")

!zip -r /content/Lexington_Ave.zip /drive/MyDrive/StreetViewImages

from google.colab import drive
drive.mount('/content/drive')

pip install google_streetview